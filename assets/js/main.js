(function () {
  'use strict';
  document.addEventListener('DOMContentLoaded', () => {
    const translations = {
        "en": {
            "heroTitle": "Fired Heater Efficiency",
            "heroSubtitle": "API-560 Heat Loss Method, Measurement & Best Practices",
            "heroTagline": "Master the science of thermal efficiency optimization in industrial fired heaters",
            "darkModeToggle": "üåô Dark Mode",
            "languageToggle": "üåê ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
            "navOverview": "Overview",
            "navApi560": "API-560 Method",
            "navMeasurements": "Measurements",
            "navConfigurations": "Complex Configurations",
            "navExamples": "Examples",
            "navTools": "Tools & Downloads",
            "navFaq": "FAQ",
            "tocTitle": "Table of Contents",
            "tocToggle": "Close table of contents",
            "tocOpen": "Open table of contents",
            "overviewTitle": "What, Why, and How of Fired Heater Efficiency",
            "overviewCard1Title": "What is Efficiency?",
            "overviewCard1Text": "Fired heater efficiency measures how effectively fuel energy is converted to useful process heat. Three key metrics: fuel efficiency (commercial), thermal efficiency (holistic), and combustion efficiency (burner performance).",
            "overviewCard2Title": "Why It Matters",
            "overviewCard2Text": "Fired heaters are the largest energy consumers in refineries. A 1% efficiency improvement on a large heater can save millions annually while reducing emissions and enhancing safety.",
            "overviewCard3Title": "How to Optimize",
            "overviewCard3Text": "Through precise measurement using API-560 standards, minimizing stack losses, reducing excess air, and implementing advanced control systems for real-time optimization.",
            "apiTitle": "API-560 in 5 Steps",
            "apiStep1": "Collect operational data: temperatures, oxygen levels, fuel composition, and humidity under steady-state conditions",
            "apiStep2": "Complete combustion worksheet using fuel composition to calculate stoichiometric parameters and heat release",
            "apiStep3": "Calculate excess air from oxygen measurements and determine all sensible heat credits from preheated inputs",
            "apiStep4": "Quantify heat losses: stack loss (largest), radiation loss, and incomplete combustion losses",
            "apiStep5": "Apply final efficiency formulas: thermal efficiency and fuel efficiency calculations based on energy balance",
            "keyLossesTitle": "Key Energy Losses",
            "keyLossesCard1Title": "Stack Loss (60-85%)",
            "keyLossesCard1Text": "Heat carried away by hot flue gases. Controlled by reducing stack temperature and minimizing excess air.",
            "keyLossesCard2Title": "Setting Loss (1.5-2.5%)",
            "keyLossesCard2Text": "Heat lost through external surfaces via radiation and convection. Indicates refractory condition.",
            "keyLossesCard3Title": "Incomplete Combustion (~0%)",
            "keyLossesCard3Text": "Energy lost due to unburned fuel (CO, hydrocarbons). Should be negligible in well-operated heaters.",
            "workflowTitle": "Annex G Workflow",
            "interactiveTitle": "Interactive Efficiency Tools",
            "excessAirCardTitle": "Excess Air vs. Efficiency",
            "excessAirLabel": "Excess Air",
            "estimatedEfficiency": "Estimated Efficiency:",
            "stackLossLabel": "Stack Loss",
            "stackTempCardTitle": "Stack Temperature Impact",
            "stackTempLabel": "Stack Temperature",
            "temperatureLoss": "Temperature Loss:",
            "optimalRange": "Optimal range: 200-320¬∞C",
            "checklistTitle": "Efficiency Test Checklist",
            "checklistItem1": "Achieve steady-state operation (2+ hours)",
            "checklistItem2": "Verify instrument calibration",
            "checklistItem3": "Obtain representative fuel analysis",
            "checklistItem4": "Verify flue gas probe location",
            "checklistItem5": "Check for air leaks/seal openings",
            "checklistItem6": "Record ambient conditions",
            "checklistItem7": "Use temperature measurement grid",
            "checklistItem8": "Document all measurements",
            "measurementsTitle": "Instrumentation and Measurement",
            "inputsTitle": "Required Input Parameters",
            "parameterColumn": "Parameter",
            "symbolColumn": "Symbol",
            "unitsColumn": "Units",
            "methodColumn": "Measurement Method",
            "ambientAir": "Ambient Air Temperature",
            "ambientMethod": "Calibrated thermometer, shielded from radiation",
            "relativeHumidity": "Relative Humidity",
            "humidityMethod": "Sling psychrometer or electronic sensor",
            "flueExitTemp": "Flue Gas Exit Temperature",
            "flueExitMethod": "Multi-point traverse or thermocouple grid",
            "flueGasOxygen": "Flue Gas Oxygen",
            "flueGasMethod": "Zirconia oxide or electrochemical analyzer",
            "fuelComposition": "Fuel Composition",
            "fuelMethod": "Gas chromatograph analysis",
            "lowerHeatingValue": "Lower Heating Value",
            "lhvMethod": "Calculated from composition or calorimetry",
            "bestPracticesTitle": "‚úÖ Best Practices",
            "bestPractice1": "‚Ä¢ Place probes downstream of final heat transfer surface",
            "bestPractice2": "‚Ä¢ Sample in central third of duct cross-section",
            "bestPractice3": "‚Ä¢ Use EPA Method 1 for large duct traverses",
            "bestPractice4": "‚Ä¢ Co-locate O‚ÇÇ and temperature sensors",
            "bestPractice5": "‚Ä¢ Calibrate instruments before each test",
            "bestPractice6": "‚Ä¢ Seal all test ports during measurement",
            "commonErrorsTitle": "‚ùå Common Errors",
            "commonError1": "‚Ä¢ Sampling upstream of air leaks (tramp air)",
            "commonError2": "‚Ä¢ Single-point measurement in stratified flow",
            "commonError3": "‚Ä¢ Uncalibrated or drifting instruments",
            "commonError4": "‚Ä¢ Non-representative fuel samples",
            "commonError5": "‚Ä¢ Ignoring humidity in air calculations",
            "commonError6": "‚Ä¢ Operating during transient conditions",
            "configTitle": "Complex Heater Configurations",
            "multiCellTitle": "Multi-Cell with Common Convection",
            "multiCellText": "Multiple radiant cells sharing a common convection section. Overall efficiency calculated from single stack measurement, but cell-specific monitoring required for control.",
            "keyChallengeLabel": "Key Challenge:",
            "keyChallengeText": "Individual cell performance masked in overall measurement",
            "independentTitle": "Independent Heaters, Common Stack",
            "independentText": "Independent heaters with separate process services sharing a common stack. Each heater requires individual flue gas measurement for meaningful performance monitoring.",
            "keyRequirementLabel": "Key Requirement:",
            "keyRequirementText": "Individual O‚ÇÇ and temperature measurement before gas streams combine",
            "measurementStrategyTitle": "‚ö†Ô∏è Measurement Strategy",
            "measurementStrategyText": "For complex configurations, the \"black box\" API-560 approach is insufficient for diagnostics and control. Use process simulators (Aspen HYSYS) or CFD (OpenFOAM) for detailed analysis of internal behavior and optimization opportunities.",
            "examplesTitle": "Example Calculations & Sensitivity Analysis",
            "combustionTitle": "API-560 Combustion Worksheet (Sample)",
            "componentColumn": "Component",
            "volColumn": "Vol %",
            "molColumn": "Mol. Wt.",
            "massFractionColumn": "Mass Fraction",
            "lhvColumn": "LHV (kJ/kg)",
            "lhvContributionColumn": "LHV Contrib.",
            "stoichColumn": "Stoich. Air",
            "chartTitle": "Sensitivity Analysis: Stack Temperature vs. Efficiency",
            "chartDescription": "This chart shows how efficiency decreases with increasing stack temperature. A 50¬∞C increase from 300¬∞C to 350¬∞C typically reduces efficiency by 2-3 percentage points.",
            "toolsTitle": "Tools & Downloads",
            "downloadReport": "üìÑ Download the Full Report (.md)",
            "excelTitle": "Excel Template",
            "excelDescription": "API-560 Annex G calculation spreadsheet with built-in formulas and validation.",
            "excelButton": "Download",
            "pythonTitle": "Python Library",
            "pythonDescription": "Open-source library for automated efficiency calculations and sensitivity analysis.",
            "pythonButton": "GitHub",
            "mobileTitle": "Mobile Calculator",
            "mobileDescription": "Quick efficiency estimates and excess air calculations for field use.",
            "mobileButton": "App Store",
            "softwareTitle": "Software Comparison Matrix",
            "softwareColumnTool": "Tool",
            "softwareColumnCost": "Cost",
            "softwareColumnExpertise": "Expertise",
            "softwareColumnAccuracy": "Accuracy",
            "softwareColumnBestFor": "Best For",
            "softwareExcel": "Excel Spreadsheet",
            "costLow": "Low",
            "expertiseMedium": "Medium",
            "accuracyHigh": "High",
            "softwareExcelBest": "API-560 calculations, custom reporting",
            "softwareHeaterSim": "HeaterSIM",
            "costHigh": "High",
            "expertiseHigh": "High",
            "accuracyVeryHigh": "Very High",
            "softwareHeaterSimBest": "Detailed design, thermal modeling",
            "softwareAspen": "Aspen HYSYS",
            "costVeryHigh": "Very High",
            "softwareAspenBest": "Plant-wide simulation, integration",
            "softwarePython": "Python/MATLAB",
            "softwarePythonBest": "Automation, sensitivity analysis",
            "softwareOnline": "Online Calculators",
            "costFree": "Free",
            "expertiseLow": "Low",
            "accuracyLow": "Low",
            "softwareOnlineBest": "Quick estimates, education",
            "faqTitle": "Frequently Asked Questions",
            "faqQ1": "Why use LHV instead of HHV for fired heater efficiency?",
            "faqA1": "API-560 mandates LHV because fired heater stack temperatures (300-450¬∞C) are well above water's dew point. The water vapor from combustion never condenses, so its latent heat is never recovered. LHV provides a realistic measure of usable energy, while HHV assumes latent heat recovery that doesn't occur in practice.",
            "faqQ2": "What's the biggest source of efficiency loss in fired heaters?",
            "faqA2": "Stack loss is by far the largest efficiency loss, typically 60-85% of total losses. It's controlled by two main factors: stack temperature (lower is better) and excess air (minimize while maintaining complete combustion). A 50¬∞C reduction in stack temperature can improve efficiency by 2-3 percentage points.",
            "faqQ3": "How accurate do flue gas measurements need to be?",
            "faqA3": "Very accurate. A 5¬∞C error in stack temperature measurement can cause a 0.5% error in calculated efficiency. Oxygen measurements should be accurate to ¬±0.1% for meaningful results. This is why proper calibration, representative sampling locations, and accounting for stratification in large ducts are critical.",
            "faqQ4": "Can I use API-560 for multi-cell heaters?",
            "faqA4": "Yes, for overall efficiency. Treat the entire system as one unit with aggregated fuel inputs and a single measurement at the common stack. However, this provides no insight into individual cell performance. For control and diagnostics, each cell needs its own measurements before gas streams combine.",
            "faqQ5": "What's the difference between thermal and fuel efficiency?",
            "faqA5": "Fuel efficiency measures useful heat absorbed vs. fuel heat input only. Thermal efficiency includes all heat inputs (fuel + preheated air + heated fuel). For economic analysis, fuel efficiency is more relevant as it directly relates to fuel costs. Thermal efficiency better represents overall system performance when air preheaters are installed.",
            "footerCredit": "Made by Ahmed Sabri with the help of AI",
            "footerDescription": "This site provides educational content on fired heater efficiency calculations using API-560 standards.",
            "lightModeToggle": "‚òÄÔ∏è Light Mode",
            "darkModeToggleLabel": "Toggle dark mode",
            "languageToggleLabel": "Switch language",
            "pageTitle": "Fired Heater Efficiency ‚Äî API-560 Heat Loss Method, Measurement & Best Practices",
            "chartDataset": "Predicted Efficiency",
            "chartXAxis": "Stack Temperature (¬∞C)",
            "chartYAxis": "Efficiency (%)",
            "chartTooltip": "Efficiency",
            "toastLanguage": "Content updated in English",
            "toastDarkModeOn": "Dark mode enabled",
            "toastDarkModeOff": "Light mode enabled",
            "checklistComplete": "Checklist completed ‚Äî great job!",
            "templateAlert": "Excel template download will be available soon.",
            "libraryAlert": "Python library repository is coming soon.",
            "mobileAlert": "Mobile calculator app is under development.",
            "stepModalTitle": "API-560 Step",
            "stepModalDescription": "Step description will appear here"
        },
        "ar": {
            "heroTitle": "ŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑÿ©",
            "heroSubtitle": "ÿ∑ÿ±ŸäŸÇÿ© API-560 ŸÑÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©ÿå ÿßŸÑŸÇŸäÿßÿ≥ Ÿàÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™",
            "heroTagline": "ÿ£ÿ™ŸÇŸÜ ÿπŸÑŸÖ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ŸÅŸä ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑÿµŸÜÿßÿπŸäÿ© ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑÿ©",
            "darkModeToggle": "üåô ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÑŸäŸÑŸä",
            "languageToggle": "üåê English",
            "navOverview": "ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ©",
            "navApi560": "ÿ∑ÿ±ŸäŸÇÿ© API-560",
            "navMeasurements": "ÿßŸÑŸÇŸäÿßÿ≥ÿßÿ™",
            "navConfigurations": "ÿßŸÑÿ™ŸÉŸàŸäŸÜÿßÿ™ ÿßŸÑŸÖÿπŸÇÿØÿ©",
            "navExamples": "ÿ£ŸÖÿ´ŸÑÿ©",
            "navTools": "ÿ£ÿØŸàÿßÿ™ ŸàŸÖŸÑŸÅÿßÿ™",
            "navFaq": "ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ©",
            "tocTitle": "ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™",
            "tocToggle": "ÿ•ÿ∫ŸÑÿßŸÇ ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™",
            "tocOpen": "ŸÅÿ™ÿ≠ ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™",
            "overviewTitle": "ŸÖÿß ŸáŸä ŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÅÿ±ŸÜ ŸàŸÑŸÖÿßÿ∞ÿß ÿ™ŸáŸÖ ŸàŸÉŸäŸÅ ŸÜÿ≠ÿ≥ŸÜŸáÿß",
            "overviewCard1Title": "ŸÖÿß ŸáŸä ÿßŸÑŸÉŸÅÿßÿ°ÿ©ÿü",
            "overviewCard1Text": "ÿ™ŸÇŸäÿ≥ ŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÅÿ±ŸÜ ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑ ŸÖÿØŸâ ÿ™ÿ≠ŸàŸäŸÑ ÿ∑ÿßŸÇÿ© ÿßŸÑŸàŸÇŸàÿØ ÿ•ŸÑŸâ ÿ≠ÿ±ÿßÿ±ÿ© ÿπŸÖŸÑŸäÿ© ŸÖŸÅŸäÿØÿ©. ÿßŸÑŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿ´ŸÑÿßÿ´ÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©: ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸàŸÇŸàÿØŸäÿ© (ÿ™ÿ¨ÿßÿ±Ÿäÿ©)ÿå ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© (ÿ¥ÿßŸÖŸÑÿ©)ÿå ŸàŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ (ÿ£ÿØÿßÿ° ÿßŸÑÿ≠ÿßÿ±ŸÇ).",
            "overviewCard2Title": "ŸÑŸÖÿßÿ∞ÿß ŸáŸä ŸÖŸáŸÖÿ©",
            "overviewCard2Text": "ÿ™ŸèÿπÿØ ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑÿ© ÿ£ŸÉÿ®ÿ± ŸÖÿ≥ÿ™ŸáŸÑŸÉ ŸÑŸÑÿ∑ÿßŸÇÿ© ŸÅŸä ÿßŸÑŸÖÿµÿßŸÅŸä. ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿ®ŸÜÿ≥ÿ®ÿ© 1% ŸÅŸä ŸÅÿ±ŸÜ ŸÉÿ®Ÿäÿ± ŸäŸàŸÅÿ± ŸÖŸÑÿßŸäŸäŸÜ ÿ≥ŸÜŸàŸäŸãÿß ŸàŸäŸÇŸÑŸÑ ÿßŸÑÿßŸÜÿ®ÿπÿßÿ´ÿßÿ™ ŸàŸäÿπÿ≤ÿ≤ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©.",
            "overviewCard3Title": "ŸÉŸäŸÅ ŸÜÿ≠ÿ≥ŸÜ ÿßŸÑÿ£ÿØÿßÿ°",
            "overviewCard3Text": "ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑŸÇŸäÿßÿ≥ ÿßŸÑÿØŸÇŸäŸÇ ŸàŸÅŸÇ ŸÖÿπÿßŸäŸäÿ± API-560ÿå Ÿàÿ™ŸÇŸÑŸäŸÑ ÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑŸÖÿØÿÆŸÜÿ©ÿå ŸàÿÆŸÅÿ∂ ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØÿå Ÿàÿ™ÿ∑ÿ®ŸäŸÇ ÿ£ŸÜÿ∏ŸÖÿ© ÿ™ÿ≠ŸÉŸÖ ŸÖÿ™ŸÇÿØŸÖÿ© ŸÑŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÅŸàÿ±Ÿä.",
            "apiTitle": "API-560 ŸÅŸä 5 ÿÆÿ∑Ÿàÿßÿ™",
            "apiStep1": "ÿ¨ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©: ÿØÿ±ÿ¨ÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©ÿå ŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ÿßŸÑÿ£ŸÉÿ≥ÿ¨ŸäŸÜÿå ÿ™ÿ±ŸÉŸäÿ® ÿßŸÑŸàŸÇŸàÿØÿå ŸàÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© ÿ™ÿ≠ÿ™ ÿ∏ÿ±ŸàŸÅ ŸÖÿ≥ÿ™ŸÇÿ±ÿ©.",
            "apiStep2": "ÿ•ŸÉŸÖÿßŸÑ Ÿàÿ±ŸÇÿ© ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ™ÿ±ŸÉŸäÿ® ÿßŸÑŸàŸÇŸàÿØ ŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑÿ≥ÿ™ŸàŸÉŸäŸàŸÖÿ™ÿ±Ÿäÿ© ŸàŸÖÿπÿØŸÑ ÿ™ÿ≠ÿ±Ÿäÿ± ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©.",
            "apiStep3": "ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ ŸÖŸÜ ŸÇŸäÿßÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÉÿ≥ÿ¨ŸäŸÜ Ÿàÿ™ÿ≠ÿØŸäÿØ ÿ¨ŸÖŸäÿπ ÿßŸÑÿßÿπÿ™ŸÖÿßÿØÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ŸÖŸÜ ÿßŸÑŸÖÿØÿÆŸÑÿßÿ™ ÿßŸÑŸÖÿ≥ÿÆŸÜÿ©.",
            "apiStep4": "ÿ™ŸÇÿØŸäÿ± ÿßŸÑÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©: ÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© (ÿßŸÑÿ£ŸÉÿ®ÿ±)ÿå ÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿ•ÿ¥ÿπÿßÿπÿå ŸàÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßŸÖŸÑ.",
            "apiStep5": "ÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿπÿßÿØŸÑÿßÿ™ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©: ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ŸàŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸàŸÇŸàÿØ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑÿ∑ÿßŸÇÿ©.",
            "keyLossesTitle": "ÿßŸÑÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©",
            "keyLossesCard1Title": "ÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© (60-85%)",
            "keyLossesCard1Text": "ÿ≠ÿ±ÿßÿ±ÿ© ÿ™ÿ≠ŸÖŸÑŸáÿß ÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜ ÿßŸÑÿ≥ÿßÿÆŸÜÿ©. ÿ™Ÿèÿ∂ÿ®ÿ∑ ÿ®ÿÆŸÅÿ∂ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© Ÿàÿ™ŸÇŸÑŸäŸÑ ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ.",
            "keyLossesCard2Title": "ÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸáŸäŸÉŸÑ (1.5-2.5%)",
            "keyLossesCard2Text": "ÿ≠ÿ±ÿßÿ±ÿ© ŸÖŸÅŸÇŸàÿØÿ© ÿπÿ®ÿ± ÿßŸÑÿ£ÿ≥ÿ∑ÿ≠ ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ© ÿ®ÿßŸÑÿ•ÿ¥ÿπÿßÿπ ŸàÿßŸÑÿ≠ŸÖŸÑ. ÿ™ÿ¥Ÿäÿ± ÿ•ŸÑŸâ ÿ≠ÿßŸÑÿ© ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©.",
            "keyLossesCard3Title": "ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ ÿ∫Ÿäÿ± ÿßŸÑŸÉÿßŸÖŸÑ (~0%)",
            "keyLossesCard3Text": "ÿ∑ÿßŸÇÿ© ŸÖŸáÿØÿ±ÿ© ÿ®ÿ≥ÿ®ÿ® ÿßŸÑŸàŸÇŸàÿØ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ≠ÿ™ÿ±ŸÇ (ÿ£ŸàŸÑ ÿ£ŸÉÿ≥ŸäÿØ ÿßŸÑŸÉÿ±ÿ®ŸàŸÜÿå ÿßŸÑŸáŸäÿØÿ±ŸàŸÉÿ±ÿ®ŸàŸÜÿßÿ™). Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ŸÖŸáŸÖŸÑÿ© ŸÅŸä ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑÿ≥ŸÑŸäŸÖÿ©.",
            "workflowTitle": "ŸÖÿÆÿ∑ÿ∑ ÿ≥Ÿäÿ± ÿßŸÑÿπŸÖŸÑ ŸÑŸÑŸÖŸÑÿ≠ŸÇ G",
            "interactiveTitle": "ÿ£ÿØŸàÿßÿ™ ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸÑŸÑŸÉŸÅÿßÿ°ÿ©",
            "excessAirCardTitle": "ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ ŸÖŸÇÿßÿ®ŸÑ ÿßŸÑŸÉŸÅÿßÿ°ÿ©",
            "excessAirLabel": "ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ",
            "estimatedEfficiency": "ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÖŸÇÿØÿ±ÿ©:",
            "stackLossLabel": "ÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ©",
            "stackTempCardTitle": "ÿ™ÿ£ÿ´Ÿäÿ± ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ©",
            "stackTempLabel": "ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ©",
            "temperatureLoss": "ÿßŸÑÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©:",
            "optimalRange": "ÿßŸÑŸÜÿ∑ÿßŸÇ ÿßŸÑŸÖÿ´ÿßŸÑŸä: 200-320¬∞ŸÖ",
            "checklistTitle": "ŸÇÿßÿ¶ŸÖÿ© ŸÅÿ≠ÿµ ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÉŸÅÿßÿ°ÿ©",
            "checklistItem1": "ÿ™ÿ≠ŸÇŸäŸÇ ÿ™ÿ¥ÿ∫ŸäŸÑ ŸÖÿ≥ÿ™ŸÇÿ± (ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿ≥ÿßÿπÿ™ŸäŸÜ)",
            "checklistItem2": "ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÖÿπÿßŸäÿ±ÿ© ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ©",
            "checklistItem3": "ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ŸàŸÇŸàÿØ ŸÖŸÖÿ´ŸÑ",
            "checklistItem4": "ÿ™ÿ£ŸÉŸäÿØ ŸÖŸàŸÇÿπ ŸÖÿ≥ÿ®ÿßÿ± ÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜ",
            "checklistItem5": "ŸÅÿ≠ÿµ ÿ™ÿ≥ÿ±ÿ®ÿßÿ™ ÿßŸÑŸáŸàÿßÿ° ÿ£Ÿà ÿßŸÑŸÅÿ™ÿ≠ÿßÿ™",
            "checklistItem6": "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ∏ÿ±ŸàŸÅ ÿßŸÑŸÖÿ≠Ÿäÿ∑ÿ©",
            "checklistItem7": "ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ¥ÿ®ŸÉÿ© ŸÇŸäÿßÿ≥ ÿØÿ±ÿ¨ÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©",
            "checklistItem8": "ÿ™Ÿàÿ´ŸäŸÇ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÇÿ±ÿßÿ°ÿßÿ™",
            "measurementsTitle": "ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ŸàÿßŸÑŸÇŸäÿßÿ≥",
            "inputsTitle": "ŸÖÿπŸÑŸÖÿßÿ™ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©",
            "parameterColumn": "ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±",
            "symbolColumn": "ÿßŸÑÿ±ŸÖÿ≤",
            "unitsColumn": "ÿßŸÑŸàÿ≠ÿØÿßÿ™",
            "methodColumn": "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÇŸäÿßÿ≥",
            "ambientAir": "ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸáŸàÿßÿ° ÿßŸÑŸÖÿ≠Ÿäÿ∑",
            "ambientMethod": "ŸÖŸäÿ≤ÿßŸÜ ÿ≠ÿ±ÿßÿ±Ÿä ŸÖÿπÿßŸäÿ± ŸàŸÖÿ≠ŸÖŸä ŸÖŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿπ",
            "relativeHumidity": "ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© ÿßŸÑŸÜÿ≥ÿ®Ÿäÿ©",
            "humidityMethod": "ÿ≥ŸäŸÉÿ±ŸàŸÖÿ™ÿ± ÿØŸàÿßÿ± ÿ£Ÿà ÿ≠ÿ≥ÿßÿ≥ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
            "flueExitTemp": "ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜ ÿπŸÜÿØ ÿßŸÑÿÆÿ±Ÿàÿ¨",
            "flueExitMethod": "ŸÖÿ≥ÿ≠ ŸÖÿ™ÿπÿØÿØ ÿßŸÑŸÜŸÇÿßÿ∑ ÿ£Ÿà ÿ¥ÿ®ŸÉÿ© ÿ™ÿ±ŸÖŸàŸÇŸäÿßÿ≥ÿßÿ™",
            "flueGasOxygen": "ÿ£ŸÉÿ≥ÿ¨ŸäŸÜ ÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜ",
            "flueGasMethod": "ŸÖÿ≠ŸÑŸÑ ÿ£ŸÉÿ≥ŸäÿØ ÿßŸÑÿ≤ÿ±ŸÉŸàŸÜŸäŸàŸÖ ÿ£Ÿà ŸÖÿ≠ŸÑŸÑ ŸÉŸáÿ±ŸàŸÉŸäŸÖŸäÿßÿ¶Ÿä",
            "fuelComposition": "ÿ™ÿ±ŸÉŸäÿ® ÿßŸÑŸàŸÇŸàÿØ",
            "fuelMethod": "ÿ™ÿ≠ŸÑŸäŸÑ ŸÉÿ±ŸàŸÖÿßÿ™Ÿàÿ∫ÿ±ÿßŸÅŸä ŸÑŸÑÿ∫ÿßÿ≤",
            "lowerHeatingValue": "ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿØŸÜŸäÿß",
            "lhvMethod": "ŸÖÿ≠ÿ≥Ÿàÿ®ÿ© ŸÖŸÜ ÿßŸÑÿ™ÿ±ŸÉŸäÿ® ÿ£Ÿà ÿ®Ÿàÿßÿ≥ÿ∑ÿ© ÿßŸÑŸÖÿ≥ÿπÿ±",
            "bestPracticesTitle": "‚úÖ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™",
            "bestPractice1": "‚Ä¢ Ÿàÿ∂ÿπ ÿßŸÑŸÖÿ¨ÿ≥ÿßÿ™ ÿ®ÿπÿØ ÿ¢ÿÆÿ± ÿ≥ÿ∑ÿ≠ ŸÑŸÜŸÇŸÑ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©",
            "bestPractice2": "‚Ä¢ ÿ£ÿÆÿ∞ ÿπŸäŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿ´ŸÑÿ´ ÿßŸÑÿ£Ÿàÿ≥ÿ∑ ŸÑŸÖŸÇÿ∑ÿπ ÿßŸÑŸÇŸÜÿßÿ©",
            "bestPractice3": "‚Ä¢ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ∑ÿ±ŸäŸÇÿ© ŸàŸÉÿßŸÑÿ© ÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ®Ÿäÿ¶ÿ© ÿ±ŸÇŸÖ 1 ŸÑŸÑŸÖŸÇÿßÿ∑ÿπ ÿßŸÑŸÉÿ®Ÿäÿ±ÿ©",
            "bestPractice4": "‚Ä¢ ÿ™Ÿàÿ≠ŸäÿØ ŸÖŸàÿßŸÇÿπ ŸÖÿ¨ÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÉÿ≥ÿ¨ŸäŸÜ ŸàÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©",
            "bestPractice5": "‚Ä¢ ŸÖÿπÿßŸäÿ±ÿ© ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ŸÇÿ®ŸÑ ŸÉŸÑ ÿßÿÆÿ™ÿ®ÿßÿ±",
            "bestPractice6": "‚Ä¢ ÿ•ÿ≠ŸÉÿßŸÖ ÿ¨ŸÖŸäÿπ ŸÅÿ™ÿ≠ÿßÿ™ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑŸÇŸäÿßÿ≥",
            "commonErrorsTitle": "‚ùå ÿ£ÿÆÿ∑ÿßÿ° ÿ¥ÿßÿ¶ÿπÿ©",
            "commonError1": "‚Ä¢ ÿ£ÿÆÿ∞ ÿπŸäŸÜÿßÿ™ ŸÇÿ®ŸÑ ŸÜŸÇÿßÿ∑ ÿ™ÿ≥ÿ±ÿ® ÿßŸÑŸáŸàÿßÿ° (ŸáŸàÿßÿ° ÿØÿÆŸäŸÑ)",
            "commonError2": "‚Ä¢ ŸÇŸäÿßÿ≥ ŸÜŸÇÿ∑ÿ© Ÿàÿßÿ≠ÿØÿ© ŸÅŸä ÿ™ÿØŸÅŸÇ ŸÖÿ™ÿØÿ±ÿ¨",
            "commonError3": "‚Ä¢ ÿ£ÿ¨Ÿáÿ≤ÿ© ÿ∫Ÿäÿ± ŸÖÿπÿßŸäÿ±ÿ© ÿ£Ÿà ÿ™ŸÜÿ≠ÿ±ŸÅ ŸÖÿπ ÿßŸÑÿ≤ŸÖŸÜ",
            "commonError4": "‚Ä¢ ÿπŸäŸÜÿßÿ™ ŸàŸÇŸàÿØ ÿ∫Ÿäÿ± ŸÖŸÖÿ´ŸÑÿ©",
            "commonError5": "‚Ä¢ ÿ™ÿ¨ÿßŸáŸÑ ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© ŸÅŸä ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸáŸàÿßÿ°",
            "commonError6": "‚Ä¢ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ∏ÿ±ŸàŸÅ ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑŸäÿ©",
            "configTitle": "ÿ™ŸÉŸàŸäŸÜÿßÿ™ ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑŸÖÿπŸÇÿØÿ©",
            "multiCellTitle": "ÿÆŸÑÿßŸäÿß ŸÖÿ™ÿπÿØÿØÿ© ŸÖÿπ ŸÇÿ≥ŸÖ ÿ≠ŸÖŸÑ ŸÖÿ¥ÿ™ÿ±ŸÉ",
            "multiCellText": "ÿÆŸÑÿßŸäÿß ÿ•ÿ¥ÿπÿßÿπŸäÿ© ŸÖÿ™ÿπÿØÿØÿ© ÿ™ÿ¥ÿ™ÿ±ŸÉ ŸÅŸä ŸÇÿ≥ŸÖ ÿ≠ŸÖŸÑ Ÿàÿßÿ≠ÿØ. ÿ™Ÿèÿ≠ÿ≥ÿ® ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ© ŸÖŸÜ ŸÇŸäÿßÿ≥ Ÿàÿßÿ≠ÿØ ŸÑŸÑŸÖÿØÿÆŸÜÿ©ÿå ŸÑŸÉŸÜ ŸäŸÑÿ≤ŸÖ ŸÖÿ±ÿßŸÇÿ®ÿ© ŸÉŸÑ ÿÆŸÑŸäÿ© ŸÑŸÑÿ™ÿ≠ŸÉŸÖ.",
            "keyChallengeLabel": "ÿßŸÑÿ™ÿ≠ÿØŸä ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä:",
            "keyChallengeText": "ÿ£ÿØÿßÿ° ŸÉŸÑ ÿÆŸÑŸäÿ© ŸäÿÆÿ™ŸÅŸä ÿØÿßÿÆŸÑ ÿßŸÑŸÇŸäÿßÿ≥ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä",
            "independentTitle": "ÿ£ŸÅÿ±ÿßŸÜ ŸÖÿ≥ÿ™ŸÇŸÑÿ© ÿ®ŸÖÿØÿÆŸÜÿ© ŸÖÿ¥ÿ™ÿ±ŸÉÿ©",
            "independentText": "ÿ£ŸÅÿ±ÿßŸÜ ŸÖÿ≥ÿ™ŸÇŸÑÿ© ÿ®ÿÆÿØŸÖÿßÿ™ ÿπŸÖŸÑŸäÿßÿ™ ŸÖŸÜŸÅÿµŸÑÿ© ÿ™ÿ¥ÿ™ÿ±ŸÉ ŸÅŸä ŸÖÿØÿÆŸÜÿ© Ÿàÿßÿ≠ÿØÿ©. Ÿäÿ≠ÿ™ÿßÿ¨ ŸÉŸÑ ŸÅÿ±ŸÜ ÿ•ŸÑŸâ ŸÇŸäÿßÿ≥ ŸÖÿ≥ÿ™ŸÇŸÑ ŸÑÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜ ŸÑŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ£ÿØÿßÿ° ÿ®ÿØŸÇÿ©.",
            "keyRequirementLabel": "ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ® ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä:",
            "keyRequirementText": "ŸÇŸäÿßÿ≥ ŸÖŸÜŸÅÿµŸÑ ŸÑŸÑÿ£ŸÉÿ≥ÿ¨ŸäŸÜ ŸàÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ŸÇÿ®ŸÑ ÿßÿÆÿ™ŸÑÿßÿ∑ ÿßŸÑÿ∫ÿßÿ≤ÿßÿ™",
            "measurementStrategyTitle": "‚ö†Ô∏è ÿ•ÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑŸÇŸäÿßÿ≥",
            "measurementStrategyText": "ŸÑŸÑÿ™ŸÉŸàŸäŸÜÿßÿ™ ÿßŸÑŸÖÿπŸÇÿØÿ©ÿå ŸÑÿß ÿ™ŸÉŸÅŸä ÿ∑ÿ±ŸäŸÇÿ© API-560 \"ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑÿ£ÿ≥ŸàÿØ\" ŸÑŸÑÿ™ÿ¥ÿÆŸäÿµ ŸàÿßŸÑÿ™ÿ≠ŸÉŸÖ. ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ (Aspen HYSYS) ÿ£Ÿà CFD (OpenFOAM) ŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≥ŸÑŸàŸÉ ÿßŸÑÿØÿßÿÆŸÑŸä ŸàŸÅÿ±ÿµ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ.",
            "examplesTitle": "ÿ≠ÿ≥ÿßÿ®ÿßÿ™ Ÿàÿ£ŸÖÿ´ŸÑÿ© ŸÑŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ©",
            "combustionTitle": "ŸÜŸÖŸàÿ∞ÿ¨ Ÿàÿ±ŸÇÿ© ÿßÿ≠ÿ™ÿ±ÿßŸÇ API-560",
            "componentColumn": "ÿßŸÑŸÖŸÉŸàŸëŸÜ",
            "volColumn": "ÿßŸÑÿ≠ÿ¨ŸÖ Ÿ™",
            "molColumn": "ÿßŸÑŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≤Ÿäÿ¶Ÿäÿ©",
            "massFractionColumn": "ÿßŸÑŸÉÿ≥ÿ± ÿßŸÑŸÉÿ™ŸÑŸä",
            "lhvColumn": "ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿØŸÜŸäÿß (ŸÉÿ¨/ŸÉÿ¨ŸÖ)",
            "lhvContributionColumn": "ŸÖÿ≥ÿßŸáŸÖÿ© ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©",
            "stoichColumn": "ŸáŸàÿßÿ° ÿ≥ÿ™ŸàŸÉŸäŸàŸÖÿ™ÿ±Ÿä",
            "chartTitle": "ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ©: ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© ŸÖŸÇÿßÿ®ŸÑ ÿßŸÑŸÉŸÅÿßÿ°ÿ©",
            "chartDescription": "ŸäŸàÿ∂ÿ≠ Ÿáÿ∞ÿß ÿßŸÑÿ±ÿ≥ŸÖ ŸÉŸäŸÅ ÿ™ŸÜÿÆŸÅÿ∂ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ŸÖÿπ ÿßÿ±ÿ™ŸÅÿßÿπ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ©. ÿ≤ŸäÿßÿØÿ© 50¬∞ŸÖ ŸÖŸÜ 300¬∞ŸÖ ÿ•ŸÑŸâ 350¬∞ŸÖ ÿ™ÿÆŸÅÿ∂ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿπÿßÿØÿ©Ÿã ÿ®ŸÖŸÇÿØÿßÿ± 2-3 ŸÜŸÇÿßÿ∑ ŸÖÿ¶ŸàŸäÿ©.",
            "toolsTitle": "ÿßŸÑÿ£ÿØŸàÿßÿ™ ŸàÿßŸÑÿ™ŸÜÿ≤ŸäŸÑÿßÿ™",
            "downloadReport": "üìÑ ÿ≠ŸÖŸëŸÑ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÉÿßŸÖŸÑ (.md)",
            "excelTitle": "ŸÇÿßŸÑÿ® ÿ•ŸÉÿ≥ŸÑ",
            "excelDescription": "Ÿàÿ±ŸÇÿ© ÿ≠ÿ≥ÿßÿ® API-560 ÿßŸÑŸÖŸÑÿ≠ŸÇ G ŸÖÿπ ÿµŸäÿ∫ ŸÖÿ∂ŸÖŸÜÿ© Ÿàÿ™ÿ≠ŸÇŸÇ.",
            "excelButton": "ÿ™ŸÜÿ≤ŸäŸÑ",
            "pythonTitle": "ŸÖŸÉÿ™ÿ®ÿ© ÿ®ÿßŸäÿ´ŸàŸÜ",
            "pythonDescription": "ŸÖŸÉÿ™ÿ®ÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ© ÿßŸÑŸÖÿµÿØÿ± ŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ¢ŸÑŸäÿ© Ÿàÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ©.",
            "pythonButton": "GitHub",
            "mobileTitle": "ÿ≠ÿßÿ≥ÿ®ÿ© ŸÖÿ≠ŸÖŸàŸÑÿ©",
            "mobileDescription": "ÿ™ŸÇÿØŸäÿ±ÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ© ŸÑŸÑŸÉŸÅÿßÿ°ÿ© Ÿàÿ≠ÿ≥ÿßÿ® ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖŸäÿØÿßŸÜŸä.",
            "mobileButton": "ŸÖÿ™ÿ¨ÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™",
            "softwareTitle": "ŸÖÿµŸÅŸàŸÅÿ© ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑÿ®ÿ±ŸÖÿ¨Ÿäÿßÿ™",
            "softwareColumnTool": "ÿßŸÑÿ£ÿØÿßÿ©",
            "softwareColumnCost": "ÿßŸÑÿ™ŸÉŸÑŸÅÿ©",
            "softwareColumnExpertise": "ÿßŸÑÿÆÿ®ÿ±ÿ©",
            "softwareColumnAccuracy": "ÿßŸÑÿØŸÇÿ©",
            "softwareColumnBestFor": "ÿ£ŸÅÿ∂ŸÑ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ",
            "softwareExcel": "ŸÖŸÑŸÅ ÿ•ŸÉÿ≥ŸÑ",
            "costLow": "ŸÖŸÜÿÆŸÅÿ∂",
            "expertiseMedium": "ŸÖÿ™Ÿàÿ≥ÿ∑",
            "accuracyHigh": "ÿπÿßŸÑŸäÿ©",
            "softwareExcelBest": "ÿ≠ÿ≥ÿßÿ®ÿßÿ™ API-560 Ÿàÿ™ŸÇÿßÿ±Ÿäÿ± ŸÖÿÆÿµÿµÿ©",
            "softwareHeaterSim": "HeaterSIM",
            "costHigh": "ÿπÿßŸÑŸç",
            "expertiseHigh": "ÿπÿßŸÑŸç",
            "accuracyVeryHigh": "ÿπÿßŸÑŸäÿ© ÿ¨ÿØŸãÿß",
            "softwareHeaterSimBest": "ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿ™ŸÅÿµŸäŸÑŸä ŸàÿßŸÑŸÜŸÖÿ∞ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©",
            "softwareAspen": "Aspen HYSYS",
            "costVeryHigh": "ŸÖÿ±ÿ™ŸÅÿπ ÿ¨ÿØŸãÿß",
            "softwareAspenBest": "ŸÖÿ≠ÿßŸÉÿßÿ© ÿßŸÑŸÖÿµŸÜÿπ ÿ®ÿßŸÑŸÉÿßŸÖŸÑ ŸàÿßŸÑÿ™ŸÉÿßŸÖŸÑ",
            "softwarePython": "Python/MATLAB",
            "softwarePythonBest": "ÿßŸÑÿ£ÿ™ŸÖÿ™ÿ© Ÿàÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ©",
            "softwareOnline": "ÿ≠ÿßÿ≥ÿ®ÿßÿ™ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©",
            "costFree": "ŸÖÿ¨ÿßŸÜŸä",
            "expertiseLow": "ŸÖŸÜÿÆŸÅÿ∂",
            "accuracyLow": "ŸÖŸÜÿÆŸÅÿ∂ÿ©",
            "softwareOnlineBest": "ÿ™ŸÇÿØŸäÿ±ÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ© Ÿàÿ™ÿØÿ±Ÿäÿ®",
            "faqTitle": "ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±ÿ©",
            "faqQ1": "ŸÑŸÖÿßÿ∞ÿß ŸÜÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿØŸÜŸäÿß ÿ®ÿØŸÑ ÿßŸÑÿπŸÑŸäÿß ŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÅÿ±ŸÜÿü",
            "faqA1": "ÿ™ŸÅÿ±ÿ∂ API-560 ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿØŸÜŸäÿß ŸÑÿ£ŸÜ ÿØÿ±ÿ¨ÿßÿ™ ÿ≠ÿ±ÿßÿ±ÿ© ŸÖÿØÿßÿÆŸÜ ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ (300-450¬∞ŸÖ) ÿ£ÿπŸÑŸâ ÿ®ŸÉÿ´Ÿäÿ± ŸÖŸÜ ŸÜŸÇÿ∑ÿ© ÿ™ŸÉÿßÿ´ŸÅ ÿßŸÑŸÖÿßÿ°. ÿ®ÿÆÿßÿ± ÿßŸÑŸÖÿßÿ° ÿßŸÑŸÜÿßÿ™ÿ¨ ÿπŸÜ ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ ŸÑÿß Ÿäÿ™ŸÉÿßÿ´ŸÅÿå ŸÑÿ∞ÿß ŸÑÿß ÿ™Ÿèÿ≥ÿ™ÿπÿßÿØ ÿ≠ÿ±ÿßÿ±ÿ™Ÿá ÿßŸÑŸÉÿßŸÖŸÜÿ©. ÿ™ÿπÿ∑Ÿä ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿØŸÜŸäÿß ŸÇŸäÿßÿ≥Ÿãÿß ŸàÿßŸÇÿπŸäŸãÿß ŸÑŸÑÿ∑ÿßŸÇÿ© ÿßŸÑŸÖŸÅŸäÿØÿ©ÿå ÿ®ŸäŸÜŸÖÿß ÿ™ŸÅÿ™ÿ±ÿ∂ ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿπŸÑŸäÿß ÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿ≠ÿ±ÿßÿ±ÿ© ŸÑÿß ÿ™ÿ≠ÿØÿ´.",
            "faqQ2": "ŸÖÿß ÿ£ŸÉÿ®ÿ± ŸÖÿµÿØÿ± ŸÑŸÅŸÇÿØÿßŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ŸÅŸä ÿßŸÑÿ£ŸÅÿ±ÿßŸÜÿü",
            "faqA2": "ÿÆÿ≥ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© ŸáŸä ÿßŸÑÿ£ŸÉÿ®ÿ±ÿå Ÿàÿ™ŸÖÿ´ŸÑ ÿπÿßÿØÿ©Ÿã 60-85% ŸÖŸÜ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿÆÿ≥ÿßÿ¶ÿ±. ÿ™ÿ™ÿ≠ŸÉŸÖ ŸÅŸäŸáÿß ÿπÿßŸÖŸÑÿßŸÜ ÿ±ÿ¶Ÿäÿ≥ŸäÿßŸÜ: ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© (ÿßŸÑÿ£ŸÇŸÑ ÿ£ŸÅÿ∂ŸÑ) ŸàÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ (ÿ™ÿÆŸÅŸäÿ∂Ÿá ŸÖÿπ ÿ∂ŸÖÿßŸÜ ÿßŸÉÿ™ŸÖÿßŸÑ ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ). ÿÆŸÅÿ∂ ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© 50¬∞ŸÖ ŸäŸÖŸÉŸÜ ÿ£ŸÜ Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿ®ŸÖŸÇÿØÿßÿ± 2-3 ŸÜŸÇÿßÿ∑.",
            "faqQ3": "ŸÖÿß ÿßŸÑÿØŸÇÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÑŸÇŸäÿßÿ≥ÿßÿ™ ÿ∫ÿßÿ≤ÿßÿ™ ÿßŸÑŸÖÿØÿßÿÆŸÜÿü",
            "faqA3": "ŸÖÿ±ÿ™ŸÅÿπÿ© ÿ¨ÿØŸãÿß. ÿÆÿ∑ÿ£ ÿ®ŸÖŸÇÿØÿßÿ± 5¬∞ŸÖ ŸÅŸä ŸÇŸäÿßÿ≥ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© Ÿäÿ≥ÿ®ÿ® ÿÆÿ∑ÿ£Ÿã ŸÇÿØÿ±Ÿá 0.5% ŸÅŸä ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÖÿ≠ÿ≥Ÿàÿ®ÿ©. Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ŸÇŸäÿßÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÉÿ≥ÿ¨ŸäŸÜ ÿ®ÿØŸÇÿ© ¬±0.1% ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸàÿ´ŸàŸÇÿ©ÿå ŸÑÿ∞ÿß ÿ™ÿπÿØ ÿßŸÑŸÖÿπÿßŸäÿ±ÿ© ÿßŸÑÿµÿ≠Ÿäÿ≠ÿ© ŸàÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸàÿßŸÇÿπ ÿßŸÑÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÖŸÖÿ´ŸÑÿ© ŸàŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ™ÿØÿ±ÿ¨ ÿØÿßÿÆŸÑ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿ£ŸÖŸàÿ±Ÿãÿß ÿ£ÿ≥ÿßÿ≥Ÿäÿ©.",
            "faqQ4": "ŸáŸÑ ŸäŸÖŸÉŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ API-560 ŸÑŸÑÿ£ŸÅÿ±ÿßŸÜ ŸÖÿ™ÿπÿØÿØÿ© ÿßŸÑÿÆŸÑÿßŸäÿßÿü",
            "faqA4": "ŸÜÿπŸÖÿå ŸÑŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÉŸÑŸäÿ©. ÿπÿßŸÖŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿ®ÿßŸÑŸÉÿßŸÖŸÑ ŸÉŸàÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ© ÿ®ŸÖÿØÿÆŸÑÿßÿ™ ŸàŸÇŸàÿØ ŸÖÿ¨ŸÖÿπÿ© ŸàŸÇŸäÿßÿ≥ Ÿàÿßÿ≠ÿØ ÿπŸÜÿØ ÿßŸÑŸÖÿØÿÆŸÜÿ© ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉÿ©. ŸÑŸÉŸÜ ÿ∞ŸÑŸÉ ŸÑÿß ŸäŸàŸÅÿ± ÿ±ÿ§Ÿäÿ© ŸÑÿ£ÿØÿßÿ° ŸÉŸÑ ÿÆŸÑŸäÿ©ÿå ŸÑÿ∞ÿß ŸäŸÑÿ≤ŸÖ ŸÇŸäÿßÿ≥ÿßÿ™ ŸÖŸÜŸÅÿµŸÑÿ© ŸÇÿ®ŸÑ ÿßÿÆÿ™ŸÑÿßÿ∑ ÿßŸÑÿ∫ÿßÿ≤ÿßÿ™ ŸÑŸÑÿ™ÿ≠ŸÉŸÖ ŸàÿßŸÑÿ™ÿ¥ÿÆŸäÿµ.",
            "faqQ5": "ŸÖÿß ÿßŸÑŸÅÿ±ŸÇ ÿ®ŸäŸÜ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ŸàŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸàŸÇŸàÿØÿü",
            "faqA5": "ÿ™ŸÇŸäÿ≥ ŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸàŸÇŸàÿØ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖŸÅŸäÿØÿ© ÿßŸÑŸÖŸÖÿ™ÿµÿ© ŸÖŸÇÿßÿ®ŸÑ ÿ∑ÿßŸÇÿ© ÿßŸÑŸàŸÇŸàÿØ ŸÅŸÇÿ∑. ÿ™ÿ¥ŸÖŸÑ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿ¨ŸÖŸäÿπ ŸÖÿØÿÆŸÑÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© (ÿßŸÑŸàŸÇŸàÿØ + ÿßŸÑŸáŸàÿßÿ° ÿßŸÑŸÖÿ≥ÿÆŸÜ + ÿßŸÑŸàŸÇŸàÿØ ÿßŸÑŸÖÿ≥ÿÆŸÜ). ÿ™ÿπÿØ ŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸàŸÇŸàÿØ ÿ£ŸáŸÖ ÿßŸÇÿ™ÿµÿßÿØŸäŸãÿß ŸÑÿ£ŸÜŸáÿß ÿ™ÿ±ÿ™ÿ®ÿ∑ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿ™ŸÉÿßŸÑŸäŸÅ ÿßŸÑŸàŸÇŸàÿØÿå ÿ®ŸäŸÜŸÖÿß ÿ™ÿπŸÉÿ≥ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ© ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑŸÉŸÑŸä ÿπŸÜÿØ Ÿàÿ¨ŸàÿØ ŸÖÿ≥ÿÆŸÜÿßÿ™ ŸáŸàÿßÿ°.",
            "footerCredit": "ŸÖŸÜ ÿ•ÿπÿØÿßÿØ ÿ£ÿ≠ŸÖÿØ ÿµÿ®ÿ±Ÿä ÿ®ŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä",
            "footerDescription": "ŸäŸàŸÅÿ± Ÿáÿ∞ÿß ÿßŸÑŸÖŸàŸÇÿπ ŸÖÿ≠ÿ™ŸàŸâŸã ÿ™ÿπŸÑŸäŸÖŸäŸãÿß ÿ≠ŸàŸÑ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑÿ© ŸàŸÅŸÇ ŸÖÿπŸäÿßÿ± API-560.",
            "lightModeToggle": "‚òÄÔ∏è ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÜŸáÿßÿ±Ÿä",
            "darkModeToggleLabel": "ÿ™ÿ∫ŸäŸäÿ± Ÿàÿ∂ÿπ ÿßŸÑÿ•ÿ∂ÿßÿ°ÿ©",
            "languageToggleLabel": "ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑŸÑÿ∫ÿ©",
            "pageTitle": "ŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿßŸÑŸÖÿ¥ÿ™ÿπŸÑÿ© ‚Äî ÿ∑ÿ±ŸäŸÇÿ© API-560 ŸÑÿÆÿ≥ÿßÿ¶ÿ± ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ŸàÿßŸÑŸÇŸäÿßÿ≥ Ÿàÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™",
            "chartDataset": "ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©",
            "chartXAxis": "ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑŸÖÿØÿÆŸÜÿ© (¬∞ŸÖ)",
            "chartYAxis": "ÿßŸÑŸÉŸÅÿßÿ°ÿ© (%)",
            "chartTooltip": "ÿßŸÑŸÉŸÅÿßÿ°ÿ©",
            "toastLanguage": "ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
            "toastDarkModeOn": "ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÑŸäŸÑŸä",
            "toastDarkModeOff": "ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÜŸáÿßÿ±Ÿä",
            "checklistComplete": "ÿ™ŸÖ ÿ•ŸÉŸÖÿßŸÑ ÿπŸÜÿßÿµÿ± ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ‚Äî ÿπŸÖŸÑ ÿ±ÿßÿ¶ÿπ!",
            "templateAlert": "ŸÇÿßŸÑÿ® ÿ•ŸÉÿ≥ŸÑ ÿ≥ŸäŸÉŸàŸÜ ŸÖÿ™ÿßÿ≠Ÿãÿß ŸÇÿ±Ÿäÿ®Ÿãÿß.",
            "libraryAlert": "ŸÖŸÉÿ™ÿ®ÿ© ÿ®ÿßŸäÿ´ŸàŸÜ ŸÇŸäÿØ ÿßŸÑÿ•ÿπÿØÿßÿØ Ÿàÿ≥ÿ™ÿ™ŸàŸÅÿ± ŸÇÿ±Ÿäÿ®Ÿãÿß.",
            "mobileAlert": "ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸáÿßÿ™ŸÅ ŸÇŸäÿØ ÿßŸÑÿ™ÿ∑ŸàŸäÿ± Ÿàÿ≥ŸäŸÉŸàŸÜ ŸÖÿ™ÿßÿ≠Ÿãÿß ŸÇÿ±Ÿäÿ®Ÿãÿß.",
            "stepModalTitle": "ÿÆÿ∑Ÿàÿ© API-560",
            "stepModalDescription": "ŸàÿµŸÅ ÿßŸÑÿÆÿ∑Ÿàÿ© ÿ≥Ÿäÿ∏Ÿáÿ± ŸáŸÜÿß"
        }
    };
    const mermaidDefinitions = {
        "en": "flowchart LR\n    A[Collect Data] --> B[Combustion Worksheet]\n    B --> C{Excess Air & Credits}\n    C --> D[Loss Evaluation]\n    D --> E[Thermal Efficiency]\n    E --> F[Optimization Actions]",
        "ar": "flowchart RL\n    A[ÿ¨ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™] --> B[Ÿàÿ±ŸÇÿ© ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ]\n    B --> C{ÿßŸÑŸáŸàÿßÿ° ÿßŸÑÿ≤ÿßÿ¶ÿØ ŸàÿßŸÑÿßÿπÿ™ŸÖÿßÿØÿßÿ™}\n    C --> D[ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿÆÿ≥ÿßÿ¶ÿ±]\n    D --> E[ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±Ÿäÿ©]\n    E --> F[ÿÆÿ∑ÿ∑ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ]"
    };
    const resourcePromises = window.__resourcePromises || {};
    const whenResourceReady = (name, callback) => {
      const resource = resourcePromises[name];
      const invoke = () => {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(() => {
            callback();
          });
        } else {
          setTimeout(() => {
            callback();
          }, 0);
        }
      };
      if (resource && typeof resource.then === 'function') {
        resource
          .then(invoke)
          .catch(invoke);
      } else {
        invoke();
      }
    };
    const html = document.documentElement;
    const body = document.body;
    const darkModeToggle = document.getElementById('darkModeToggle');
    const languageToggle = document.getElementById('languageToggle');
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const mobileNavBarLinks = document.querySelectorAll('.mobile-nav-bar .nav-link');
    const desktopNavContainer = document.querySelector('.hidden.md\\:flex');
    const desktopNavLinks = desktopNavContainer ? desktopNavContainer.querySelectorAll('.nav-link') : [];
    const navLinks = document.querySelectorAll('.nav-link');
    const tocSidebar = document.getElementById('tocSidebar');
    const tocToggle = document.getElementById('tocToggle');
    const tocButton = document.getElementById('tocButton');
    const tocNav = document.getElementById('tocNav');
    const viewportQuery = window.matchMedia('(max-width: 767px)');
    const sections = document.querySelectorAll('main section[id]');
    const firstSectionId = sections[0] ? sections[0].id : '';
    const excessAirSlider = document.getElementById('excessAirSlider');
    const stackTempSlider = document.getElementById('stackTempSlider');
    const excessAirValue = document.getElementById('excessAirValue');
    const efficiencyValue = document.getElementById('efficiencyValue');
    const stackLossValue = document.getElementById('stackLossValue');
    const stackLossBar = document.getElementById('stackLossBar');
    const stackTempValue = document.getElementById('stackTempValue');
    const stackTempBar = document.getElementById('tempLossBar');
    const tempLossValue = document.getElementById('tempLossValue');
    const checklistItems = document.querySelectorAll('.checklist-item');
    const faqQuestions = document.querySelectorAll('.faq-question');
    const alertButtons = document.querySelectorAll('[data-alert-key]');
    const stackTempUnitNode = stackTempValue ? stackTempValue.nextSibling : null;
    const stepModal = document.getElementById('stepModal');
    const stepModalClose = document.getElementById('closeModal');
    const stepModalNumber = document.getElementById('modalStepNumber');
    const stepModalTitle = document.getElementById('modalStepTitle');
    const stepModalDescription = document.getElementById('modalStepDescription');
    const stepperSteps = document.querySelectorAll('.stepper-step');

    let currentLanguage = localStorage.getItem('preferredLanguage') || 'en';
    if (!translations[currentLanguage]) {
      currentLanguage = 'en';
    }
    let storedTheme = localStorage.getItem('theme');
    let isDarkMode = storedTheme ? storedTheme === 'dark' : window.matchMedia('(prefers-color-scheme: dark)').matches;
    let sensitivityChart = null;
    let manualHighlightTarget = '';
    let manualHighlightTimestamp = 0;
    let mermaidRetryAttempts = 0;
    const manualHighlightDelay = 1200;

    const synchronizeNavHref = () => {
      const mobileView = viewportQuery.matches;
      desktopNavLinks.forEach((link) => {
        const sectionId = link.dataset.sectionId;
        if (!sectionId) return;
        if (!link.dataset.originalHref) {
          const existing = link.getAttribute('href');
          link.dataset.originalHref = existing && existing.startsWith('#') ? existing : `#${sectionId}`;
        }
        if (mobileView) {
          link.setAttribute('href', `#desktop-${sectionId}`);
        } else {
          link.setAttribute('href', link.dataset.originalHref);
        }
      });
      mobileNavBarLinks.forEach((link) => {
        const sectionId = link.dataset.sectionId;
        if (!sectionId) return;
        const targetHref = mobileView ? `#${sectionId}` : `#nav-${sectionId}`;
        link.setAttribute('href', targetHref);
      });
    };

    synchronizeNavHref();
    if (typeof viewportQuery.addEventListener === 'function') {
      viewportQuery.addEventListener('change', synchronizeNavHref);
    } else if (typeof viewportQuery.addListener === 'function') {
      viewportQuery.addListener(synchronizeNavHref);
    }

    function formatNumber(value, options = {}) {
      try {
        const locale = currentLanguage === 'ar' ? 'ar-EG' : 'en-US';
        return new Intl.NumberFormat(locale, options).format(value);
      } catch (error) {
        console.warn('Number formatting failed', error);
        return value.toString();
      }
    }

    function showToast(message) {
      if (!message) return;
      let container = document.getElementById('toastContainer');
      if (!container) {
        container = document.createElement('div');
        container.id = 'toastContainer';
        container.style.position = 'fixed';
        container.style.top = '1.5rem';
        container.style.left = '50%';
        container.style.transform = 'translateX(-50%)';
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        container.style.gap = '0.5rem';
        container.style.zIndex = '2000';
        body.appendChild(container);
      }
      const toast = document.createElement('div');
      toast.textContent = message;
      toast.style.padding = '0.65rem 1.2rem';
      toast.style.borderRadius = '9999px';
      toast.style.background = 'rgba(17, 24, 39, 0.92)';
      toast.style.color = '#fff';
      toast.style.boxShadow = '0 10px 30px rgba(15, 23, 42, 0.25)';
      toast.style.fontSize = '0.95rem';
      toast.style.fontWeight = '600';
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(6px)';
      toast.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        container.appendChild(toast);
      requestAnimationFrame(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
      });
      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(6px)';
        setTimeout(() => {
          toast.remove();
          if (!container.childElementCount) {
            container.remove();
          }
        }, 350);
      }, 2400);
    }

    function setLanguageAttributes(lang) {
      const isArabic = lang === 'ar';
      html.setAttribute('lang', lang);
      html.setAttribute('dir', isArabic ? 'rtl' : 'ltr');
      body.classList.toggle('rtl', isArabic);
    }

    function applyTranslations(lang) {
      const catalog = translations[lang];
      if (!catalog) return;
      document.querySelectorAll('[data-i18n]').forEach((element) => {
        const key = element.dataset.i18n;
        const translation = catalog[key];
        if (!translation) return;
        const textNodes = Array.from(element.childNodes)
          .filter((node) => node.nodeType === Node.TEXT_NODE && node.textContent.trim().length > 0);
        if (textNodes.length > 0) {
          textNodes[0].textContent = translation;
          for (let index = 1; index < textNodes.length; index += 1) {
            textNodes[index].textContent = '';
          }
        } else if (!element.childElementCount) {
          element.textContent = translation;
        }
      });
      document.querySelectorAll('[data-i18n-attr]').forEach((element) => {
        const attrName = element.dataset.i18nAttr;
        const attrKey = element.dataset.i18nAttrKey || element.dataset.i18n;
        const translation = catalog[attrKey];
        if (translation) {
          element.setAttribute(attrName, translation);
        }
      });
      if (catalog.pageTitle) {
        document.title = catalog.pageTitle;
      }
    }

    function updateToggleText() {
      const catalog = translations[currentLanguage];
      if (darkModeToggle && catalog) {
        const labelKey = isDarkMode ? 'lightModeToggle' : 'darkModeToggle';
        if (catalog[labelKey]) {
          darkModeToggle.textContent = catalog[labelKey];
        }
        if (catalog.darkModeToggleLabel) {
          darkModeToggle.setAttribute('aria-label', catalog.darkModeToggleLabel);
        }
      }
      if (languageToggle && catalog && catalog.languageToggleLabel) {
        languageToggle.setAttribute('aria-label', catalog.languageToggleLabel);
      }
    }

    function updateUnits() {
      if (stackTempUnitNode) {
        stackTempUnitNode.textContent = currentLanguage === 'ar' ? '¬∞ŸÖ' : '¬∞C';
      }
    }

    function setThemeState(dark) {
      isDarkMode = dark;
      html.classList.toggle('dark', dark);
      localStorage.setItem('theme', dark ? 'dark' : 'light');
      updateToggleText();
      whenResourceReady('mermaid', renderMermaid);
      whenResourceReady('chart', buildChart);
    }

    function calculateEfficiency(value) {
      const efficiency = Math.max(70, 95 - (value * 0.5));
      const stackLoss = Math.max(5, 100 - efficiency);
      return { efficiency, stackLoss };
    }

    function handleExcessAirChange(value) {
      const numeric = Number(value);
      if (!Number.isFinite(numeric)) return;
      const { efficiency, stackLoss } = calculateEfficiency(numeric);
      if (excessAirValue) {
        excessAirValue.textContent = formatNumber(numeric, { maximumFractionDigits: 0 });
      }
      if (efficiencyValue) {
        efficiencyValue.textContent = `${formatNumber(efficiency, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}%`;
      }
      if (stackLossValue) {
        stackLossValue.textContent = `${formatNumber(stackLoss, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}%`;
      }
      if (stackLossBar) {
        stackLossBar.style.width = `${stackLoss}%`;
      }
      localStorage.setItem('excessAirValue', String(numeric));
    }

    function handleStackTempChange(value) {
      const numeric = Number(value);
      if (!Number.isFinite(numeric)) return;
      const loss = Math.max(0, (numeric - 200) * 0.082);
      if (stackTempValue) {
        stackTempValue.textContent = formatNumber(numeric, { maximumFractionDigits: 0 });
      }
      if (tempLossValue) {
        tempLossValue.textContent = `${formatNumber(loss, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}%`;
      }
      if (stackTempBar) {
        stackTempBar.style.width = `${Math.min(loss, 100)}%`;
      }
      localStorage.setItem('stackTempValue', String(numeric));
    }

    function generateTOC() {
      if (!tocNav) return;
      tocNav.innerHTML = '';
      const fragment = document.createDocumentFragment();
      sections.forEach((section) => {
        const heading = section.querySelector('h2');
        if (!heading) return;
        const link = document.createElement('a');
        link.href = `#toc-${section.id}`;
        link.className = 'block px-3 py-2 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-700';
        link.textContent = heading.textContent.trim();
        link.dataset.sectionId = section.id;
        fragment.appendChild(link);
      });
      tocNav.appendChild(fragment);
    }

    function highlightNavigation(targetId) {
      if (!targetId) return;
      const updateActive = (elements) => {
        elements.forEach((link) => {
          const datasetTarget = link.dataset.sectionId;
          const href = link.getAttribute('href');
          const normalizedHref = href && href.startsWith('#') ? href.slice(1) : '';
          const isActive = datasetTarget ? datasetTarget === targetId : normalizedHref === targetId;
          if (isActive) {
            link.classList.add('text-blue-600', 'dark:text-blue-400', 'font-semibold');
            if (link.classList.contains('nav-link') || link.classList.contains('mobile-nav-link')) {
              link.classList.add('nav-active');
            }
          } else {
            link.classList.remove('text-blue-600', 'dark:text-blue-400', 'font-semibold');
            if (link.classList.contains('nav-link') || link.classList.contains('mobile-nav-link')) {
              link.classList.remove('nav-active');
            }
          }
        });
      };
      updateActive(navLinks);
      updateActive(mobileNavLinks);
      if (tocNav) {
        updateActive(tocNav.querySelectorAll('a'));
      }
    }

    function observeSections() {
      let lastObservedSection = '';
      const observer = new IntersectionObserver((entries) => {
        const now = performance.now();
        if (manualHighlightTarget) {
          if ((now - manualHighlightTimestamp) < manualHighlightDelay) {
            highlightNavigation(manualHighlightTarget);
            return;
          }
          manualHighlightTarget = '';
        }

        if (firstSectionId) {
          const firstSection = document.getElementById(firstSectionId);
          if (firstSection) {
            const rect = firstSection.getBoundingClientRect();
            if (window.scrollY < 120 || (rect.top >= 0 && rect.top < 160)) {
              lastObservedSection = firstSectionId;
              highlightNavigation(firstSectionId);
              return;
            }
          }
        }

        const visibleEntries = entries.filter((entry) => entry.isIntersecting);
        if (visibleEntries.length === 0) {
          return;
        }

        visibleEntries.sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
        const activeEntry = visibleEntries[0];
        if (activeEntry?.target?.id && activeEntry.target.id !== lastObservedSection) {
          lastObservedSection = activeEntry.target.id;
          highlightNavigation(activeEntry.target.id);
        }
      }, { threshold: [0.1, 0.35, 0.6], rootMargin: '-25% 0px -55% 0px' });
      sections.forEach((section) => observer.observe(section));
    }

    function closeMobileMenu() {
      if (!mobileMenu) return;
      mobileMenu.classList.add('hidden');
      body.classList.remove('mobile-menu-open');
      if (mobileMenuToggle) {
        mobileMenuToggle.setAttribute('aria-expanded', 'false');
      }
    }

    function toggleMobileMenu() {
      if (!mobileMenu) return;
      const willOpen = mobileMenu.classList.contains('hidden');
      if (willOpen) {
        mobileMenu.classList.remove('hidden');
        body.classList.add('mobile-menu-open');
      } else {
        mobileMenu.classList.add('hidden');
        body.classList.remove('mobile-menu-open');
      }
      if (mobileMenuToggle) {
        mobileMenuToggle.setAttribute('aria-expanded', willOpen ? 'true' : 'false');
      }
    }

    function openTocSidebar() {
      if (!tocSidebar) return;
      tocSidebar.classList.add('is-visible', 'translate-x-0');
      tocSidebar.classList.remove('-translate-x-full');
      body.classList.add('toc-open');
      tocButton?.setAttribute('aria-expanded', 'true');
    }

    function closeTocSidebar() {
      if (!tocSidebar) return;
      tocSidebar.classList.remove('is-visible', 'translate-x-0');
      tocSidebar.classList.add('-translate-x-full');
      body.classList.remove('toc-open');
      tocButton?.setAttribute('aria-expanded', 'false');
    }

    function renderMermaid() {
      const container = document.getElementById('mermaidChart');
      if (!container) return;
      if (!window.mermaid) {
        if (mermaidRetryAttempts < 5) {
          mermaidRetryAttempts += 1;
          setTimeout(() => renderMermaid(), 120);
        }
        return;
      }
      const definition = mermaidDefinitions[currentLanguage];
      if (!definition) return;
      const theme = isDarkMode ? 'dark' : 'default';
      const handleError = (error) => {
        console.error('Mermaid rendering failed', error);
        if (mermaidRetryAttempts < 5) {
          mermaidRetryAttempts += 1;
          setTimeout(() => renderMermaid(), 150);
        }
      };
      const applyRenderResult = (result) => {
        if (!result) return;
        const svgMarkup = typeof result === 'string' ? result : result.svg;
        if (typeof svgMarkup === 'string') {
          container.innerHTML = svgMarkup;
        }
        const bindFunctions = result && result.bindFunctions;
        if (typeof bindFunctions === 'function') {
          bindFunctions(container);
        }
        mermaidRetryAttempts = 0;
      };
      try {
        window.mermaid.initialize({ startOnLoad: false, theme, securityLevel: 'loose' });
        const renderId = `mermaid-chart-${currentLanguage}-${theme}`;
        const renderOutcome = window.mermaid.render(renderId, definition);
        if (renderOutcome && typeof renderOutcome.then === 'function') {
          renderOutcome.then(applyRenderResult).catch(handleError);
        } else {
          applyRenderResult(renderOutcome);
        }
      } catch (error) {
        handleError(error);
      }
    }

    function buildChart() {
      const canvas = document.getElementById('sensitivityChart');
      if (!canvas || !window.Chart) return;
      const unit = currentLanguage === 'ar' ? '¬∞ŸÖ' : '¬∞C';
      const labels = [200, 250, 300, 350, 400, 450]
        .map((value) => `${formatNumber(value, { maximumFractionDigits: 0 })}${unit}`);
      const datasetLabel = translations[currentLanguage].chartDataset;
      const dataPoints = [92, 90, 87.5, 85, 82.5, 79];
      const context = canvas.getContext('2d');
      const tooltipLabel = translations[currentLanguage].chartTooltip;
      if (!sensitivityChart) {
        sensitivityChart = new Chart(context, {
          type: 'line',
          data: {
            labels,
            datasets: [{
              label: datasetLabel,
              data: dataPoints,
              borderColor: '#2563eb',
              backgroundColor: 'rgba(37, 99, 235, 0.15)',
              tension: 0.35,
              pointRadius: 4,
              fill: true,
            }],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: { intersect: false, mode: "nearest" },
            plugins: {
              legend: {
                labels: {
                  font: { family: 'Inter, system-ui, sans-serif' },
                  color: isDarkMode ? '#e5e7eb' : '#1f2937',
                },
              },
              tooltip: {
                rtl: currentLanguage === 'ar',
                callbacks: {
                  label: (context) => (
                    `${tooltipLabel}: ${formatNumber(context.parsed.y, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}%`
                  ),
                },
              },
            },
            scales: {
              x: {
                title: { display: true, text: translations[currentLanguage].chartXAxis },
                ticks: { reverse: currentLanguage === 'ar', color: isDarkMode ? '#cbd5f5' : '#1f2937', font: { family: 'Inter, system-ui, sans-serif' } },
                grid: { color: isDarkMode ? 'rgba(148, 163, 184, 0.2)' : 'rgba(203, 213, 225, 0.4)' },
              },
              y: {
                suggestedMin: 75,
                suggestedMax: 95,
                ticks: { callback: (value) => `${formatNumber(value, { maximumFractionDigits: 0 })}%`, color: isDarkMode ? '#cbd5f5' : '#1f2937', font: { family: 'Inter, system-ui, sans-serif' } },
                title: { display: true, text: translations[currentLanguage].chartYAxis },
                grid: { color: isDarkMode ? 'rgba(148, 163, 184, 0.2)' : 'rgba(203, 213, 225, 0.4)' },
              },
            },
          },
        });
      } else {
        sensitivityChart.data.labels = labels;
        sensitivityChart.data.datasets[0].label = datasetLabel;
        sensitivityChart.data.datasets[0].data = dataPoints;
        sensitivityChart.options.plugins.tooltip.rtl = currentLanguage === 'ar';
        sensitivityChart.options.plugins.tooltip.callbacks.label = (context) => (
          `${tooltipLabel}: ${formatNumber(context.parsed.y, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}%`
        );
        sensitivityChart.options.scales.x.title.text = translations[currentLanguage].chartXAxis;
        sensitivityChart.options.scales.x.ticks.reverse = currentLanguage === 'ar';
        sensitivityChart.options.scales.x.ticks.color = isDarkMode ? '#cbd5f5' : '#1f2937';
        sensitivityChart.options.scales.y.title.text = translations[currentLanguage].chartYAxis;
        sensitivityChart.options.scales.y.ticks.color = isDarkMode ? '#cbd5f5' : '#1f2937';
        sensitivityChart.options.plugins.legend.labels.color = isDarkMode ? '#e5e7eb' : '#1f2937';
        sensitivityChart.update();
      }
    }

    function restoreState() {
      const savedExcessAir = localStorage.getItem('excessAirValue');
      if (savedExcessAir && excessAirSlider) {
        excessAirSlider.value = savedExcessAir;
      }
      const savedStackTemp = localStorage.getItem('stackTempValue');
      if (savedStackTemp && stackTempSlider) {
        stackTempSlider.value = savedStackTemp;
      }
      if (excessAirSlider) {
        handleExcessAirChange(excessAirSlider.value);
      }
      if (stackTempSlider) {
        handleStackTempChange(stackTempSlider.value);
      }
      checklistItems.forEach((item) => {
        const storageKey = `checklist-${item.dataset.item}`;
        const storedValue = localStorage.getItem(storageKey);
        if (storedValue === 'true') {
          item.checked = true;
        }
      });
    }

    function showStepModal(stepNumber) {
      if (!stepModal || !stepNumber) return;

      // Check if device is mobile/tablet (touch device or screen width)
      const isMobile = window.innerWidth <= 768 || 'ontouchstart' in window;
      if (!isMobile) return; // Only show modal on mobile devices

      const stepKey = `apiStep${stepNumber}`;
      const translation = translations[currentLanguage];
      const stepDescription = translation[stepKey] || `Step ${stepNumber} description`;

      // Update modal content
      if (stepModalNumber) {
        stepModalNumber.textContent = stepNumber;
      }
      if (stepModalTitle) {
        const titleText = `${translation.stepModalTitle || 'API-560 Step'} ${stepNumber}`;
        stepModalTitle.textContent = titleText;
      }
      if (stepModalDescription) {
        stepModalDescription.textContent = stepDescription;
      }

      // Show modal at current scroll position
      const scrollY = window.scrollY || document.documentElement.scrollTop;
      stepModal.style.display = 'flex';
      stepModal.style.top = `${scrollY}px`;
      document.body.style.overflow = 'hidden'; // Prevent background scrolling

      // Focus trap for accessibility
      setTimeout(() => {
        const firstFocusable = stepModal.querySelector('button, [tabindex]:not([tabindex="-1"])');
        if (firstFocusable) {
          firstFocusable.focus();
        }
      }, 100);
    }

    function hideStepModal() {
      if (!stepModal) return;

      stepModal.style.display = 'none';
      stepModal.style.top = '0px'; // Reset position
      document.body.style.overflow = ''; // Restore scrolling
    }

    function bindEvents() {
      darkModeToggle?.addEventListener('click', () => {
        setThemeState(!isDarkMode);
        const message = translations[currentLanguage][isDarkMode ? 'toastDarkModeOn' : 'toastDarkModeOff'];
        showToast(message);
      });

      languageToggle?.addEventListener('click', () => {
        currentLanguage = currentLanguage === 'ar' ? 'en' : 'ar';
        localStorage.setItem('preferredLanguage', currentLanguage);
        setLanguageAttributes(currentLanguage);
        applyTranslations(currentLanguage);
        updateToggleText();
        updateUnits();
        generateTOC();
        whenResourceReady('mermaid', renderMermaid);
        whenResourceReady('chart', buildChart);
        const message = translations[currentLanguage].toastLanguage;
        showToast(message);
      });

      mobileMenuToggle?.addEventListener('click', toggleMobileMenu);

      const activateLink = (link, event) => {
        if (!link) return;
        const datasetTarget = link.dataset.sectionId;
        const href = link.getAttribute('href');
        const targetId = datasetTarget || (href && href.startsWith('#') ? href.slice(1) : '');
        if (!targetId) return;
        const normalizedHref = `#${targetId}`;
        if (datasetTarget || href !== normalizedHref) {
          event?.preventDefault();
          const targetSection = document.getElementById(targetId);
          if (targetSection) {
            targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
          try {
            window.history.replaceState(null, '', normalizedHref);
          } catch (error) {
            console.warn('History update failed', error);
          }
        }
        highlightNavigation(targetId);
        manualHighlightTarget = targetId;
        manualHighlightTimestamp = performance.now();
      };

      navLinks.forEach((link) => {
        link.addEventListener('click', (event) => {
          activateLink(link, event);
        });
      });

      mobileNavLinks.forEach((link) => {
        link.addEventListener('click', (event) => {
          activateLink(link, event);
          closeMobileMenu();
        });
      });

      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          closeMobileMenu();
          closeTocSidebar();
        }
      });

      tocButton?.addEventListener('click', () => {
        if (tocSidebar?.classList.contains('is-visible')) {
          closeTocSidebar();
        } else {
          openTocSidebar();
        }
      });

      tocToggle?.addEventListener('click', closeTocSidebar);

      tocNav?.addEventListener('click', (event) => {
        const link = event.target.closest('a');
        if (!link) return;
        activateLink(link, event);
        closeTocSidebar();
      });

      excessAirSlider?.addEventListener('input', (event) => {
        handleExcessAirChange(event.target.value);
      });

      stackTempSlider?.addEventListener('input', (event) => {
        handleStackTempChange(event.target.value);
      });

      alertButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const { alertKey } = button.dataset;
          if (!alertKey) return;
          const catalog = translations[currentLanguage] || translations.en;
          const fallback = translations.en;
          const message = (catalog && catalog[alertKey]) || (fallback && fallback[alertKey]);
          if (message) {
            showToast(message);
          }
        });
      });

      checklistItems.forEach((item) => {
        item.addEventListener('change', () => {
          const storageKey = `checklist-${item.dataset.item}`;
          localStorage.setItem(storageKey, item.checked ? 'true' : 'false');
          const allChecked = Array.from(checklistItems).every((checkbox) => checkbox.checked);
          if (allChecked) {
            showToast(translations[currentLanguage].checklistComplete);
          }
        });
      });

      faqQuestions.forEach((button) => {
        button.addEventListener('click', () => {
          const targetId = button.dataset.target;
          const answer = document.getElementById(targetId);
          if (!answer) return;
          const shouldOpen = answer.classList.contains('hidden');
          document.querySelectorAll('.faq-answer').forEach((panel) => {
            panel.classList.add('hidden');
            const iconWrapper = panel.previousElementSibling?.querySelector('.faq-arrow');
            const iconSvg = iconWrapper?.querySelector('svg');
            if (iconWrapper) {
              iconWrapper.classList.remove('rotate-180');
            }
            if (iconSvg) {
              iconSvg.style.transform = '';
              iconSvg.style.transformOrigin = '';
              iconSvg.style.transformBox = '';
            }
          });
          if (shouldOpen) {
            answer.classList.remove('hidden');
            const arrowWrapper = button.querySelector('.faq-arrow');
            const arrowSvg = arrowWrapper?.querySelector('svg');
            if (arrowWrapper) {
              arrowWrapper.classList.add('rotate-180');
            }
            if (arrowSvg) {
              arrowSvg.style.transform = 'rotate(180deg)';
              arrowSvg.style.transformOrigin = 'center';
              arrowSvg.style.transformBox = 'fill-box';
            }
          }
        });
      });

      // Modal event handlers
      stepModalClose?.addEventListener('click', hideStepModal);

      // Close modal when clicking outside
      stepModal?.addEventListener('click', (event) => {
        if (event.target === stepModal) {
          hideStepModal();
        }
      });

      // Close modal with Escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && stepModal && stepModal.style.display === 'flex') {
          hideStepModal();
        }
      });

      // Step click handlers for mobile
      stepperSteps.forEach((step) => {
        step.addEventListener('click', () => {
          const stepNumber = step.getAttribute('data-step');
          if (stepNumber) {
            showStepModal(stepNumber);
          }
        });

        // Add touch feedback for mobile
        step.addEventListener('touchstart', () => {
          step.style.transform = 'scale(0.95)';
        }, { passive: true });

        step.addEventListener('touchend', () => {
          step.style.transform = '';
        }, { passive: true });
      });
    }

    setLanguageAttributes(currentLanguage);
    applyTranslations(currentLanguage);
    updateUnits();
    setThemeState(isDarkMode);
    restoreState();
    generateTOC();
    observeSections();
    whenResourceReady('mermaid', renderMermaid);
    whenResourceReady('chart', buildChart);
    const initialHash = window.location.hash ? window.location.hash.slice(1) : '';
    const defaultSectionId = initialHash || (sections[0] ? sections[0].id : '');
    if (defaultSectionId) {
      highlightNavigation(defaultSectionId);
    }
    bindEvents();
    updateToggleText();
  });
})();
